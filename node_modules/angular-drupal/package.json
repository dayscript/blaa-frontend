{
  "name": "angular-drupal",
  "version": "0.0.6",
  "description": "An Angular JS module for Drupal 7.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/easystreet3/angular-drupal.git"
  },
  "keywords": [
    "angular",
    "drupal"
  ],
  "author": {
    "name": "Tyler Frankenstein",
    "email": "tyler.frankenstein@gmail.com",
    "url": "http://tylerfrankenstein.com/"
  },
  "license": "GNU",
  "bugs": {
    "url": "https://github.com/easystreet3/angular-drupal/issues"
  },
  "homepage": "https://github.com/easystreet3/angular-drupal",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-uglify": "^0.9.1",
    "grunt-contrib-watch": "^0.6.1",
    "jasmine-core": "^2.3.4",
    "karma": "^0.12.36",
    "karma-chrome-launcher": "^0.1.12",
    "karma-jasmine": "^0.3.5"
  },
  "readme": "# angular-drupal\n\nAn Angular JS module for Drupal 7 Services.\n\n# Intro\n\nThis Angular module makes it easy to `read/write` entity data `to/from` Drupal,\nhandles user authentication and registration, and makes it easy to retrieve\nJSON data from Views.\n\nHere's a very *simple* Angular app that loads `node # 123` from Drupal and then\ndisplays the node's title (via an `alert`):\n\n```\n// My simple app.\nangular.module('myApp', ['angular-drupal']).run(['drupal', function(drupal) {\n\n  drupal.node_load(123).then(function(node) {\n    alert(node.title);\n  });\n\n}]);\n\n// The angular-drupal configuration settings for my simple app.\nangular.module('angular-drupal').config(function($provide) {\n\n  $provide.value('drupalSettings', {\n    sitePath: 'http://my-drupal-site.com',\n    endpoint: 'api'\n  });\n\n});\n```\n\n# Installation and Setup\n\nThere are two main parts to the installation and usage of this module. First,\non your Drupal site you need to install the *Angular Drupal* module, then\ninstall and configure *Services* module, and then include the *angular-drupal*\nmodule in your Angular JS application.\n\n## 0. Angular Drupal Module\n\nhttps://www.drupal.org/project/angular_drupal\n\n```\ndrush dl angular_drupal\ndrush en -y angular_drupal\n```\n\n## 1. Drupal Services Module Setup\n\nhttps://www.drupal.org/project/services\n\n```\ndrush dl services\ndrush en -y rest_server\n```\n\nThen create a new endpoint by going to *admin/structure/services/add* with the\nfollowing info:\n\n```\nmachine name: api\nserver: REST\npath: api\ndebug: unchecked\nsession authentication: checked\n```\n\nThen click the edit resources link and check the box next to each resource that\nshould be available to your app:\n\n```\ncomment\nfile\nnode\nsystem\ntaxonomy_term\ntaxonomy_vocabulary\nuser\n```\n\nThen click *Save*. After that, click the *Server* tab and make sure the\nfollowing boxes are checked:\n\n```\njson\napplication/json\napplication/x-www-form-urlencoded\n```\n\nThen click *Save*. After that flush all of Drupal's caches.\n\n```\ndrush cc all\n```\n\n## 2. Angular JS Setup\n\nAs usual, be sure to include the `angular-drupal.js` file in your app. This\ntypically is included via the `index.html` file somewhere after you include the\n`angular.js` file:\n\n```\n<script src=\"angular-drupal.js\"></script>\n```\n\nThe `angular-drupal` module comes with a Service called `drupal`. You can\ninclude this service throughout your app using Angular's dependency injection\nmechanism.\n\nThe simple app, listed above, injects the `drupal` service into the app's `run`\nfunction. Then when the app runs it loads `node # 123` from Drupal and then\nalerts the node's title.\n\nNotice how we used a `config` function on the `angular-drupal` module in the\nsimple app to provide the URL to our Drupal site, as well as the machine name of\nthe Services endpoint. Without this, the module won't know how to connect to\nour Drupal site, so this must be added to our app as in the example above.\n\n# Usage\n\n## AUTHENTICATION\n\n### CONNECT\n```\ndrupal.connect().then(function(data) {\n  if (data.user.uid) { alert('Hello ' + data.user.name + '!'); }\n  else { alert('Please login.');  }\n});\n```\n\n### USER REGISTRATION\n```\nvar account = {\n  name: 'bob',\n  mail: 'bob@example.com',\n  pass: 'secret'\n};\ndrupal.user_register(account).then(function(data) {\n    alert('Registered user # ' + data.uid);\n});\n```\n\n### USER LOGIN\n```\ndrupal.user_login('bob', 'secret').then(function(data) {\n  if (data.user.uid) {\n    alert('Hello ' + data.user.name + '!');\n  }\n});\n```\n\n### USER LOGOUT\n```\ndrupal.user_logout().then(function(data) {\n  if (!data.user.uid) {\n    alert('Logged out!');\n  }\n});\n```\n\n## NODES\n\n### CREATE\n```\nvar node = {\n  type: 'article',\n  title: 'Hello world',\n  language: 'und',\n  body: { und: [ { value: 'How are you?' }] }\n};\ndrupal.node_save(node).then(function(data) {\n    alert('Created node: ' + data.nid);\n});\n```\n\n### RETRIEVE\n```\ndrupal.node_load(123).then(function(node) {\n    alert('Loaded node: ' + node.title);\n});\n```\n\n### UPDATE\n```\nvar node = {\n  nid: 123,\n  title: 'Goodbye world',\n  language: 'und',\n  body: {\n    und: [ { value: 'I am fine, thank you.' }]\n  }\n};\ndrupal.node_save(node).then(function(data) {\n    alert('Updated node: ' + data.nid);\n});\n```\n\n### DELETE\n```\ndrupal.node_delete(123).then(function(data) {\n    if (data[0]) {\n      alert('Deleted node.');\n    }\n});\n```\n\n### INDEX\n```\nvar query = {\n  parameters: {\n    'type': 'article'\n  }\n};\ndrupal.node_index(query).then(function(nodes) {\n    var msg = '';\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      msg += 'Loaded node: ' + node.title + '\\n';\n    }\n    alert(msg);\n});\n```\n\n## USERS\n\n### CREATE\nTo create a new user account, the user must have the `Administer users`\npermission enabled in Drupal.\n```\nvar account = {\n  name: 'jane',\n  mail: 'jane@example.com',\n  pass: 'secret-sauce'\n};\ndrupal.user_save(account).then(function(data) {\n  alert('Created new user #' + data.uid);\n});\n```\n\n### RETRIEVE\n```\ndrupal.user_load(1).then(function(account) {\n    alert('Loaded user: ' + account.name);\n});\n```\n\n### UPDATE\nTo update an existing user account, the user must have the `Change own username`\nor `Administer users` permission enabled in Drupal.\n```\nvar account = {\n  uid: 123,\n  name: 'john'\n};\ndrupal.user_save(account).then(function(data) {\n  alert('Name changed to: ' + data.name);\n});\n```\n\n### DELETE\nThe user must have the `Administer users` permission to delete a user account.\n```\ndrupal.user_delete(123).then(function(data) {\n    if (data[0]) {\n      alert('Deleted user.');\n    }\n});\n```\n\n### INDEX\n```\nvar query = {\n  parameters: {\n    'name': 'bob'\n  }\n};\ndrupal.user_index(query).then(function(users) {\n    var msg = '';\n    for (var i = 0; i < users.length; i++) {\n      var user = users[i];\n      msg += 'Loaded user: ' + user.name + '\\n';\n    }\n    alert(msg);\n});\n```\n\n## COMMENTS\n\n### CREATE\n```\nvar comment = {\n  nid: 123,\n  subject: 'Hello world',\n  comment_body: { und: [ { value: 'How are you?' } ] }\n};\ndrupal.comment_save(comment).then(function(data) {\n    alert('Created comment: ' + data.cid);\n});\n```\n\n### RETRIEVE\n```\ndrupal.comment_load(123).then(function(comment) {        \n    alert('Loaded comment: ' + comment.subject);  \n});\n```\n\n### UPDATE\n```\nvar comment = {\n  cid: 456,\n  subject: 'Goodbye world',\n  comment_body: { und: [ { value: 'I am fine, thank you.' }] }\n};\ndrupal.comment_save(comment).then(function(data) {\n    alert('Updated comment: ' + data.cid);\n});\n```\n\n### DELETE\n```\ndrupal.comment_delete(123).then(function(data) {\n    if (data[0]) {\n      alert('Deleted comment.');\n    }\n});\n```\n\n### INDEX\n```\nvar query = {\n  parameters: {\n    'nid': 123\n  }\n};\ndrupal.comment_index(query).then(function(comments) {\n    var msg = '';\n    for (var i = 0; i < comments.length; i++) {\n      var comment = comments[i];\n      msg += 'Loaded comment: ' + comment.subject + '\\n';\n    }\n    alert(msg);\n});\n```\n\n## FILES\n\n### CREATE\n```\nvar base_64_encoded_image = 'abc...xyz';\nvar file = {\n  file: base_64_encoded_image,\n  filename: 'my_image.jpg',\n  filepath: 'public://my_image.jpg'\n};\ndrupal.file_save(file).then(function(data) {\n    alert('Saved file # ' + data.fid);\n});\n```\n\n### RETRIEVE\nTo load a file the user must have the `Get any binary files ` permission in\nDrupal.\n```\ndrupal.file_load(123).then(function(file) {\n    alert('Loaded file: ' + file.filename);\n});\n```\n\n## TAXONOMY TERMS\n\n### CREATE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_NEW/7\nvar taxonomy_term = {\n  vid: 1,\n  name: 'Hello world'\n};\ndrupal.taxonomy_term_save(taxonomy_term).then(function(data) {\n    if (data[0] == 1) { // SAVED_NEW\n      alert('Created taxonomy term.');\n    }\n});\n```\n\n### RETRIEVE\n```\ndrupal.taxonomy_term_load(123).then(function(term) {\n    alert('Loaded term: ' + term.name);\n});\n```\n\n### UPDATE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_UPDATED/7\nvar taxonomy_term = {\n  vid: 1,\n  tid: 123,\n  name: 'Goodbye world'\n};\ndrupal.taxonomy_term_save(taxonomy_term).then(function(data) {\n    if (data[0] == 2) { // SAVED_UPDATED\n      alert('Updated taxonomy term.');\n    }\n});\n```\n\n### DELETE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_DELETED/7\ndrupal.taxonomy_term_delete(123).then(function(data) {\n    if (data[0] == 3) { // SAVED_DELETED\n      alert('Deleted taxonomy term.');\n    }\n});\n```\n\n### INDEX\n```\nvar query = {\n  parameters: {\n    'vid': 1\n  }\n};\ndrupal.taxonomy_term_index(query).then(function(taxonomy_terms) {\n    var msg = '';\n    for (var i = 0; i < taxonomy_terms.length; i++) {\n      var taxonomy_term = taxonomy_terms[i];\n      msg += 'Loaded taxonomy term: ' + taxonomy_term.name + '\\n';\n    }\n    alert(msg);\n});\n```\n\n## TAXONOMY VOCABULARIES\n\n### CREATE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_NEW/7\nvar taxonomy_vocabulary = {\n  name: 'Fruits',\n  machine_name: 'fruits',\n  description: 'Fruit is delicious.'\n};\ndrupal.taxonomy_vocabulary_save(taxonomy_vocabulary).then(function(data) {\n    if (data[0] == 1) { // SAVED_NEW\n      alert('Created taxonomy vocabulary.');\n    }\n});\n```\n\n### RETRIEVE\n```\ndrupal.taxonomy_vocabulary_load(1).then(function(vocabulary) {\n    alert('Loaded vocabulary: ' + vocabulary.name); \n});\n```\n\n### UPDATE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_UPDATED/7\nvar taxonomy_vocabulary = {\n  vid: 2,\n  name: 'Colorful Fruits',\n  machine_name: 'fruits',\n  description: 'Colorful fruit is even more delicious.'\n};\ndrupal.taxonomy_vocabulary_save(taxonomy_vocabulary).then(function(data) {\n    if (data[0] == 2) { // SAVED_UPDATED\n      alert('Updated taxonomy vocabulary.');\n    }\n});\n```\n\n### DELETE\n```\n// @see https://api.drupal.org/api/drupal/includes!common.inc/constant/SAVED_DELETED/7\ndrupal.taxonomy_vocabulary_delete(123).then(function(data) {\n    if (data[0] == 3) { // SAVED_DELETED\n      alert('Deleted taxonomy vocabulary.');\n    }\n});\n```\n\n### INDEX\n```\nvar query = {\n  parameters: {\n    'name': 'tags'\n  }\n};\ndrupal.taxonomy_vocabulary_index(query).then(function(taxonomy_vocabularys) {\n    var msg = '';\n    for (var i = 0; i < taxonomy_vocabularys.length; i++) {\n      var taxonomy_vocabulary = taxonomy_vocabularys[i];\n      msg += 'Loaded taxonomy vocabulary: ' + taxonomy_vocabulary.name + '\\n';\n    }\n    alert(msg);\n});\n```\n\n## Views\n\nIf you install the Views JSON module, which is available as a sub module of the\nViews Datasource module (https://www.drupal.org/project/views_datasource), you\ncan easily set up a View page display to return JSON to your app:\n\n```\nvar path = 'articles'; // The Drupal path to the Views JSON page display.\ndrupal.views_json(path).then(function(rows) {\n  angular.forEach(rows, function(row, i) {\n    console.log(row.title);\n  });\n});\n```\n\nFor more information on creating Views JSON page displays, read this:\n\nhttp://drupalgap.org/node/220\n\n## X-CSRF-Token\nThe `angular-drupal` module automatically takes care of the `X-CSRF-Token` when\nit is needed. If you need to manually get the token it can easily be retrieved:\n```\ndrupal.token().then(function(token) {\n  console.log('Got the token: ' + token);\n});\n```\n\n# DISCLAIMER\nI, `Tyler Frankenstein`, admit I am very much a *n00b* when it comes to Angular\nJS. The way this module is currently written is by no means the *Angular* way to\ndo it. Writing this module is my gateway into learning Angular. This module has\nunit test coverage to maintain quality. I very much welcome comments, criticisms\nand contributions for this project. Thank you!\n\n",
  "readmeFilename": "README.md",
  "_id": "angular-drupal@0.0.6",
  "dist": {
    "shasum": "62141b25df74c1f9d7930278dcd65541a76b9510"
  },
  "_from": "angular-drupal@^0.0.6",
  "_resolved": "https://registry.npmjs.org/angular-drupal/-/angular-drupal-0.0.6.tgz"
}
